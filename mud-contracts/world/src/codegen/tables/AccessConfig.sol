// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0001010201000000000000000000000000000000000000000000000000000000
);

struct AccessConfigData {
  uint8 enforcementLevel;
  bytes32[] initialMsgSender;
  bytes32[] txOrigin;
}

library AccessConfig {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](2);
    _keySchema[0] = SchemaType.UINT256;
    _keySchema[1] = SchemaType.UINT256;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](3);
    _valueSchema[0] = SchemaType.UINT8;
    _valueSchema[1] = SchemaType.BYTES32_ARRAY;
    _valueSchema[2] = SchemaType.BYTES32_ARRAY;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "entityId";
    keyNames[1] = "configId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "enforcementLevel";
    fieldNames[1] = "initialMsgSender";
    fieldNames[2] = "txOrigin";
  }

  /**
   * @notice Register the table with its config.
   */
  function register(ResourceId _tableId) internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register(ResourceId _tableId) internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get enforcementLevel.
   */
  function getEnforcementLevel(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId
  ) internal view returns (uint8 enforcementLevel) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get enforcementLevel.
   */
  function _getEnforcementLevel(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId
  ) internal view returns (uint8 enforcementLevel) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set enforcementLevel.
   */
  function setEnforcementLevel(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId,
    uint8 enforcementLevel
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((enforcementLevel)), _fieldLayout);
  }

  /**
   * @notice Set enforcementLevel.
   */
  function _setEnforcementLevel(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId,
    uint8 enforcementLevel
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((enforcementLevel)), _fieldLayout);
  }

  /**
   * @notice Get initialMsgSender.
   */
  function getInitialMsgSender(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId
  ) internal view returns (bytes32[] memory initialMsgSender) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /**
   * @notice Get initialMsgSender.
   */
  function _getInitialMsgSender(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId
  ) internal view returns (bytes32[] memory initialMsgSender) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /**
   * @notice Set initialMsgSender.
   */
  function setInitialMsgSender(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId,
    bytes32[] memory initialMsgSender
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((initialMsgSender)));
  }

  /**
   * @notice Set initialMsgSender.
   */
  function _setInitialMsgSender(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId,
    bytes32[] memory initialMsgSender
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((initialMsgSender)));
  }

  /**
   * @notice Get the length of initialMsgSender.
   */
  function lengthInitialMsgSender(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of initialMsgSender.
   */
  function _lengthInitialMsgSender(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of initialMsgSender.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemInitialMsgSender(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId,
    uint256 _index
  ) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (bytes32(_blob));
    }
  }

  /**
   * @notice Get an item of initialMsgSender.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemInitialMsgSender(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId,
    uint256 _index
  ) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (bytes32(_blob));
    }
  }

  /**
   * @notice Push an element to initialMsgSender.
   */
  function pushInitialMsgSender(ResourceId _tableId, uint256 entityId, uint256 configId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to initialMsgSender.
   */
  function _pushInitialMsgSender(ResourceId _tableId, uint256 entityId, uint256 configId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from initialMsgSender.
   */
  function popInitialMsgSender(ResourceId _tableId, uint256 entityId, uint256 configId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Pop an element from initialMsgSender.
   */
  function _popInitialMsgSender(ResourceId _tableId, uint256 entityId, uint256 configId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Update an element of initialMsgSender at `_index`.
   */
  function updateInitialMsgSender(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId,
    uint256 _index,
    bytes32 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of initialMsgSender at `_index`.
   */
  function _updateInitialMsgSender(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId,
    uint256 _index,
    bytes32 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get txOrigin.
   */
  function getTxOrigin(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId
  ) internal view returns (bytes32[] memory txOrigin) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /**
   * @notice Get txOrigin.
   */
  function _getTxOrigin(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId
  ) internal view returns (bytes32[] memory txOrigin) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /**
   * @notice Set txOrigin.
   */
  function setTxOrigin(ResourceId _tableId, uint256 entityId, uint256 configId, bytes32[] memory txOrigin) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((txOrigin)));
  }

  /**
   * @notice Set txOrigin.
   */
  function _setTxOrigin(ResourceId _tableId, uint256 entityId, uint256 configId, bytes32[] memory txOrigin) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((txOrigin)));
  }

  /**
   * @notice Get the length of txOrigin.
   */
  function lengthTxOrigin(ResourceId _tableId, uint256 entityId, uint256 configId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of txOrigin.
   */
  function _lengthTxOrigin(ResourceId _tableId, uint256 entityId, uint256 configId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of txOrigin.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemTxOrigin(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId,
    uint256 _index
  ) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (bytes32(_blob));
    }
  }

  /**
   * @notice Get an item of txOrigin.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemTxOrigin(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId,
    uint256 _index
  ) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (bytes32(_blob));
    }
  }

  /**
   * @notice Push an element to txOrigin.
   */
  function pushTxOrigin(ResourceId _tableId, uint256 entityId, uint256 configId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to txOrigin.
   */
  function _pushTxOrigin(ResourceId _tableId, uint256 entityId, uint256 configId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from txOrigin.
   */
  function popTxOrigin(ResourceId _tableId, uint256 entityId, uint256 configId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Pop an element from txOrigin.
   */
  function _popTxOrigin(ResourceId _tableId, uint256 entityId, uint256 configId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Update an element of txOrigin at `_index`.
   */
  function updateTxOrigin(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId,
    uint256 _index,
    bytes32 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of txOrigin at `_index`.
   */
  function _updateTxOrigin(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId,
    uint256 _index,
    bytes32 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId
  ) internal view returns (AccessConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId
  ) internal view returns (AccessConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId,
    uint8 enforcementLevel,
    bytes32[] memory initialMsgSender,
    bytes32[] memory txOrigin
  ) internal {
    bytes memory _staticData = encodeStatic(enforcementLevel);

    PackedCounter _encodedLengths = encodeLengths(initialMsgSender, txOrigin);
    bytes memory _dynamicData = encodeDynamic(initialMsgSender, txOrigin);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    ResourceId _tableId,
    uint256 entityId,
    uint256 configId,
    uint8 enforcementLevel,
    bytes32[] memory initialMsgSender,
    bytes32[] memory txOrigin
  ) internal {
    bytes memory _staticData = encodeStatic(enforcementLevel);

    PackedCounter _encodedLengths = encodeLengths(initialMsgSender, txOrigin);
    bytes memory _dynamicData = encodeDynamic(initialMsgSender, txOrigin);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(ResourceId _tableId, uint256 entityId, uint256 configId, AccessConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.enforcementLevel);

    PackedCounter _encodedLengths = encodeLengths(_table.initialMsgSender, _table.txOrigin);
    bytes memory _dynamicData = encodeDynamic(_table.initialMsgSender, _table.txOrigin);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(ResourceId _tableId, uint256 entityId, uint256 configId, AccessConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.enforcementLevel);

    PackedCounter _encodedLengths = encodeLengths(_table.initialMsgSender, _table.txOrigin);
    bytes memory _dynamicData = encodeDynamic(_table.initialMsgSender, _table.txOrigin);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(bytes memory _blob) internal pure returns (uint8 enforcementLevel) {
    enforcementLevel = (uint8(Bytes.slice1(_blob, 0)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    PackedCounter _encodedLengths,
    bytes memory _blob
  ) internal pure returns (bytes32[] memory initialMsgSender, bytes32[] memory txOrigin) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    initialMsgSender = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    txOrigin = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    PackedCounter _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (AccessConfigData memory _table) {
    (_table.enforcementLevel) = decodeStatic(_staticData);

    (_table.initialMsgSender, _table.txOrigin) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(ResourceId _tableId, uint256 entityId, uint256 configId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(ResourceId _tableId, uint256 entityId, uint256 configId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(uint8 enforcementLevel) internal pure returns (bytes memory) {
    return abi.encodePacked(enforcementLevel);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    bytes32[] memory initialMsgSender,
    bytes32[] memory txOrigin
  ) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(initialMsgSender.length * 32, txOrigin.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    bytes32[] memory initialMsgSender,
    bytes32[] memory txOrigin
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((initialMsgSender)), EncodeArray.encode((txOrigin)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint8 enforcementLevel,
    bytes32[] memory initialMsgSender,
    bytes32[] memory txOrigin
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(enforcementLevel);

    PackedCounter _encodedLengths = encodeLengths(initialMsgSender, txOrigin);
    bytes memory _dynamicData = encodeDynamic(initialMsgSender, txOrigin);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 entityId, uint256 configId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(entityId));
    _keyTuple[1] = bytes32(uint256(configId));

    return _keyTuple;
  }
}
