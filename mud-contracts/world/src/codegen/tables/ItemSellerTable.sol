// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0076060020202014010100000000000000000000000000000000000000000000
);

struct ItemSellerTableData {
  uint256 acceptedItemTypeId;
  uint256 erc20PurchasePriceWei;
  uint256 erc20BuybackPriceWei;
  address erc20Address;
  bool isPurchaseAllowed;
  bool isBuybackAllowed;
}

library ItemSellerTable {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.UINT256;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](6);
    _valueSchema[0] = SchemaType.UINT256;
    _valueSchema[1] = SchemaType.UINT256;
    _valueSchema[2] = SchemaType.UINT256;
    _valueSchema[3] = SchemaType.ADDRESS;
    _valueSchema[4] = SchemaType.BOOL;
    _valueSchema[5] = SchemaType.BOOL;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "smartObjectId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "acceptedItemTypeId";
    fieldNames[1] = "erc20PurchasePriceWei";
    fieldNames[2] = "erc20BuybackPriceWei";
    fieldNames[3] = "erc20Address";
    fieldNames[4] = "isPurchaseAllowed";
    fieldNames[5] = "isBuybackAllowed";
  }

  /**
   * @notice Register the table with its config.
   */
  function register(ResourceId _tableId) internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register(ResourceId _tableId) internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get acceptedItemTypeId.
   */
  function getAcceptedItemTypeId(
    ResourceId _tableId,
    uint256 smartObjectId
  ) internal view returns (uint256 acceptedItemTypeId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get acceptedItemTypeId.
   */
  function _getAcceptedItemTypeId(
    ResourceId _tableId,
    uint256 smartObjectId
  ) internal view returns (uint256 acceptedItemTypeId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set acceptedItemTypeId.
   */
  function setAcceptedItemTypeId(ResourceId _tableId, uint256 smartObjectId, uint256 acceptedItemTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((acceptedItemTypeId)), _fieldLayout);
  }

  /**
   * @notice Set acceptedItemTypeId.
   */
  function _setAcceptedItemTypeId(ResourceId _tableId, uint256 smartObjectId, uint256 acceptedItemTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((acceptedItemTypeId)), _fieldLayout);
  }

  /**
   * @notice Get erc20PurchasePriceWei.
   */
  function getErc20PurchasePriceWei(
    ResourceId _tableId,
    uint256 smartObjectId
  ) internal view returns (uint256 erc20PurchasePriceWei) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get erc20PurchasePriceWei.
   */
  function _getErc20PurchasePriceWei(
    ResourceId _tableId,
    uint256 smartObjectId
  ) internal view returns (uint256 erc20PurchasePriceWei) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set erc20PurchasePriceWei.
   */
  function setErc20PurchasePriceWei(
    ResourceId _tableId,
    uint256 smartObjectId,
    uint256 erc20PurchasePriceWei
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((erc20PurchasePriceWei)), _fieldLayout);
  }

  /**
   * @notice Set erc20PurchasePriceWei.
   */
  function _setErc20PurchasePriceWei(
    ResourceId _tableId,
    uint256 smartObjectId,
    uint256 erc20PurchasePriceWei
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((erc20PurchasePriceWei)), _fieldLayout);
  }

  /**
   * @notice Get erc20BuybackPriceWei.
   */
  function getErc20BuybackPriceWei(
    ResourceId _tableId,
    uint256 smartObjectId
  ) internal view returns (uint256 erc20BuybackPriceWei) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get erc20BuybackPriceWei.
   */
  function _getErc20BuybackPriceWei(
    ResourceId _tableId,
    uint256 smartObjectId
  ) internal view returns (uint256 erc20BuybackPriceWei) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set erc20BuybackPriceWei.
   */
  function setErc20BuybackPriceWei(ResourceId _tableId, uint256 smartObjectId, uint256 erc20BuybackPriceWei) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((erc20BuybackPriceWei)), _fieldLayout);
  }

  /**
   * @notice Set erc20BuybackPriceWei.
   */
  function _setErc20BuybackPriceWei(ResourceId _tableId, uint256 smartObjectId, uint256 erc20BuybackPriceWei) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((erc20BuybackPriceWei)), _fieldLayout);
  }

  /**
   * @notice Get erc20Address.
   */
  function getErc20Address(ResourceId _tableId, uint256 smartObjectId) internal view returns (address erc20Address) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get erc20Address.
   */
  function _getErc20Address(ResourceId _tableId, uint256 smartObjectId) internal view returns (address erc20Address) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set erc20Address.
   */
  function setErc20Address(ResourceId _tableId, uint256 smartObjectId, address erc20Address) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((erc20Address)), _fieldLayout);
  }

  /**
   * @notice Set erc20Address.
   */
  function _setErc20Address(ResourceId _tableId, uint256 smartObjectId, address erc20Address) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((erc20Address)), _fieldLayout);
  }

  /**
   * @notice Get isPurchaseAllowed.
   */
  function getIsPurchaseAllowed(
    ResourceId _tableId,
    uint256 smartObjectId
  ) internal view returns (bool isPurchaseAllowed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get isPurchaseAllowed.
   */
  function _getIsPurchaseAllowed(
    ResourceId _tableId,
    uint256 smartObjectId
  ) internal view returns (bool isPurchaseAllowed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set isPurchaseAllowed.
   */
  function setIsPurchaseAllowed(ResourceId _tableId, uint256 smartObjectId, bool isPurchaseAllowed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((isPurchaseAllowed)), _fieldLayout);
  }

  /**
   * @notice Set isPurchaseAllowed.
   */
  function _setIsPurchaseAllowed(ResourceId _tableId, uint256 smartObjectId, bool isPurchaseAllowed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((isPurchaseAllowed)), _fieldLayout);
  }

  /**
   * @notice Get isBuybackAllowed.
   */
  function getIsBuybackAllowed(
    ResourceId _tableId,
    uint256 smartObjectId
  ) internal view returns (bool isBuybackAllowed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get isBuybackAllowed.
   */
  function _getIsBuybackAllowed(
    ResourceId _tableId,
    uint256 smartObjectId
  ) internal view returns (bool isBuybackAllowed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set isBuybackAllowed.
   */
  function setIsBuybackAllowed(ResourceId _tableId, uint256 smartObjectId, bool isBuybackAllowed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((isBuybackAllowed)), _fieldLayout);
  }

  /**
   * @notice Set isBuybackAllowed.
   */
  function _setIsBuybackAllowed(ResourceId _tableId, uint256 smartObjectId, bool isBuybackAllowed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((isBuybackAllowed)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(ResourceId _tableId, uint256 smartObjectId) internal view returns (ItemSellerTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(ResourceId _tableId, uint256 smartObjectId) internal view returns (ItemSellerTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    ResourceId _tableId,
    uint256 smartObjectId,
    uint256 acceptedItemTypeId,
    uint256 erc20PurchasePriceWei,
    uint256 erc20BuybackPriceWei,
    address erc20Address,
    bool isPurchaseAllowed,
    bool isBuybackAllowed
  ) internal {
    bytes memory _staticData = encodeStatic(
      acceptedItemTypeId,
      erc20PurchasePriceWei,
      erc20BuybackPriceWei,
      erc20Address,
      isPurchaseAllowed,
      isBuybackAllowed
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    ResourceId _tableId,
    uint256 smartObjectId,
    uint256 acceptedItemTypeId,
    uint256 erc20PurchasePriceWei,
    uint256 erc20BuybackPriceWei,
    address erc20Address,
    bool isPurchaseAllowed,
    bool isBuybackAllowed
  ) internal {
    bytes memory _staticData = encodeStatic(
      acceptedItemTypeId,
      erc20PurchasePriceWei,
      erc20BuybackPriceWei,
      erc20Address,
      isPurchaseAllowed,
      isBuybackAllowed
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(ResourceId _tableId, uint256 smartObjectId, ItemSellerTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.acceptedItemTypeId,
      _table.erc20PurchasePriceWei,
      _table.erc20BuybackPriceWei,
      _table.erc20Address,
      _table.isPurchaseAllowed,
      _table.isBuybackAllowed
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(ResourceId _tableId, uint256 smartObjectId, ItemSellerTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.acceptedItemTypeId,
      _table.erc20PurchasePriceWei,
      _table.erc20BuybackPriceWei,
      _table.erc20Address,
      _table.isPurchaseAllowed,
      _table.isBuybackAllowed
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 acceptedItemTypeId,
      uint256 erc20PurchasePriceWei,
      uint256 erc20BuybackPriceWei,
      address erc20Address,
      bool isPurchaseAllowed,
      bool isBuybackAllowed
    )
  {
    acceptedItemTypeId = (uint256(Bytes.slice32(_blob, 0)));

    erc20PurchasePriceWei = (uint256(Bytes.slice32(_blob, 32)));

    erc20BuybackPriceWei = (uint256(Bytes.slice32(_blob, 64)));

    erc20Address = (address(Bytes.slice20(_blob, 96)));

    isPurchaseAllowed = (_toBool(uint8(Bytes.slice1(_blob, 116))));

    isBuybackAllowed = (_toBool(uint8(Bytes.slice1(_blob, 117))));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    PackedCounter,
    bytes memory
  ) internal pure returns (ItemSellerTableData memory _table) {
    (
      _table.acceptedItemTypeId,
      _table.erc20PurchasePriceWei,
      _table.erc20BuybackPriceWei,
      _table.erc20Address,
      _table.isPurchaseAllowed,
      _table.isBuybackAllowed
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(ResourceId _tableId, uint256 smartObjectId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(ResourceId _tableId, uint256 smartObjectId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 acceptedItemTypeId,
    uint256 erc20PurchasePriceWei,
    uint256 erc20BuybackPriceWei,
    address erc20Address,
    bool isPurchaseAllowed,
    bool isBuybackAllowed
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        acceptedItemTypeId,
        erc20PurchasePriceWei,
        erc20BuybackPriceWei,
        erc20Address,
        isPurchaseAllowed,
        isBuybackAllowed
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 acceptedItemTypeId,
    uint256 erc20PurchasePriceWei,
    uint256 erc20BuybackPriceWei,
    address erc20Address,
    bool isPurchaseAllowed,
    bool isBuybackAllowed
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(
      acceptedItemTypeId,
      erc20PurchasePriceWei,
      erc20BuybackPriceWei,
      erc20Address,
      isPurchaseAllowed,
      isBuybackAllowed
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 smartObjectId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(smartObjectId));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
