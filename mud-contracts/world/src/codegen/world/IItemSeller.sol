// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { EntityRecordData, SmartObjectData, WorldPosition } from "./../../modules/smart-storage-unit/types.sol";
import { InventoryItem } from "./../../modules/inventory/types.sol";

/**
 * @title IItemSeller
 * @dev This interface is automatically generated from the corresponding system contract. Do not edit manually.
 */
interface IItemSeller {
  function eveworld__createAndAnchorItemSeller(
    uint256 smartObjectId,
    EntityRecordData memory entityRecordData,
    SmartObjectData memory smartObjectData,
    WorldPosition memory worldPosition,
    uint256 fuelUnitVolume,
    uint256 fuelConsumptionPerMinute,
    uint256 fuelMaxCapacity,
    uint256 storageCapacity,
    uint256 ephemeralStorageCapacity
  ) external;

  function eveworld__setItemSellerAcceptedItemTypeId(uint256 smartObjectId, uint256 entityTypeId) external;

  function eveworld__setAllowPurchase(uint256 smartObjectId, bool isAllowed) external;

  function eveworld__setAllowBuyback(uint256 smartObjectId, bool isAllowed) external;

  function eveworld__setERC20PurchasePrice(uint256 smartObjectId, uint256 purchasePriceInWei) external;

  function eveworld__setERC20BuybackPrice(uint256 smartObjectId, uint256 buybackPriceInWei) external;

  function eveworld__setERC20Currency(uint256 smartObjectId, address erc20Address) external;

  function eveworld__itemSellerDepositToInventoryHook(uint256 smartObjectId, InventoryItem[] memory items) external;

  function eveworld__itemSellerWithdrawFromInventoryHook(uint256 smartObjectId, InventoryItem[] memory items) external;
}
